// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//Modelo de datos para los clientes (tabla)
model Usuario {
  id Int @id @default(autoincrement())
  nombre String
  telefono String
  email String @unique
  ordenesDePedido OrdenDePedido[]
  role Roles @relation(fields: [roleId], references: [id])
  roleId Int
}

model Roles {
  id Int @id @default(autoincrement())
  name String @unique
  User Usuario[]
}

// Modelo de datos para las órdenes de pedido
model OrdenDePedido {
  id Int @id @default(autoincrement())
  fecha DateTime @default(now())
  userId Int
  direccionEntrega String
  ciudadEnt String
  departamentoEnt String
  cliente Usuario @relation(fields: [userId], references: [id])
  metodoPago String
  entregada Boolean
  fechaDespacho DateTime
  productos  OrdenDePedidoProducto[] 
}

model OrdenDePedidoProducto {
  ordenDePedidoId  Int
  productoId       String
  cantidad         Int
  precio           Float
  ordenDePedido    OrdenDePedido  @relation(fields: [ordenDePedidoId], references: [id])
  producto         Product      @relation(fields: [productoId], references: [id])
  @@id([ordenDePedidoId, productoId])
}


model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  padreId   String?
  padre     Category?  @relation("PadreHijos", fields: [padreId], references: [id])
  hijos     Category[] @relation("PadreHijos")
  product    Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  brand       String
  code        String   @unique
  eancode     String   @unique
  quantity    Float
  promo       Boolean
  active      Boolean
  image       Image[]
  price       Price[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  ordenesDePedido OrdenDePedidoProducto[]  // Relación que permite acceder a todas las órdenes de pedido asociadas con un producto y su cantidad
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  publicId  String
  secureUrl String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Price {
  id        String  @id @default(uuid())
  price1 Float
  price2  Float?
  price3 Float?
  price4  Float?
  price5  Float?
  price6 Float?
  product   Product @relation(fields: [productId], references: [id])
  productId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//Modelos para autenticar

model AuthUser {
  id           String        @id @unique
  email     String        @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}




